#include <iostream>
#include <fstream>
#include <cmath>
#include <cstdlib>

// ROOT libraries
#include "TRandom3.h"
#include <TTree.h>
#include <TFile.h>
#include <TH1F.h>
#include <TH2F.h>
#include <TF1.h>
#include <TH1D.h>

#include "fullTreeVariables.h"
#include "MWPCGeometry.h"
#include "pedestals.h"
#include "cuts.h"
#include "basic_reconstruction.h"

using namespace std;

int main(int argc, char *argv[])
{
  cout.setf(ios::fixed, ios::floatfield);
  cout.precision(12);

  // Prompt for filename of run numbers
  int iXeRunPeriod;
  int nRuns;
  int runList[500];
  cout << "Enter Xenon run period: " << endl;
  cin  >> iXeRunPeriod;
  char temp[500];
  sprintf(temp, "xenon_runs_%i.dat", iXeRunPeriod);
  ifstream fileRuns(temp);

  fileRuns >> nRuns;
  for (int i=0; i<nRuns; i++) {
    fileRuns >> runList[i];
  }

  cout << nRuns << endl;
  for (int i=0; i<nRuns; i++) {
    cout << runList[i] << endl;
  }

  // Position bins
  int nPosBinsX = 11;
  int nPosBinsY = 11;  
  double xBinWidth = 10.0;
  double yBinWidth = 10.0;
  double xBinLower[nPosBinsX];
  double xBinUpper[nPosBinsX];
  double xBinCenter[nPosBinsX];
  double yBinLower[nPosBinsY];
  double yBinUpper[nPosBinsY];
  double yBinCenter[nPosBinsY];
  int intXBinCenter[nPosBinsX];
  int intYBinCenter[nPosBinsY];

  for (int k=0; k<nPosBinsX; k++) {
    xBinLower[k]     = -55.0 + ((double) k)*xBinWidth;
    xBinUpper[k]     = -55.0 + ((double) k)*xBinWidth + xBinWidth;
    xBinCenter[k]    = (xBinLower[k] + xBinUpper[k])/2.;
    intXBinCenter[k] = (int) xBinCenter[k];
    //cout << xBinLower[k] << " " << intXBinCenter[k] << " " << xBinUpper[k] << endl;
  }

  for (int k=0; k<nPosBinsY; k++) {
    yBinLower[k]     = -55.0 + ((double) k)*yBinWidth;
    yBinUpper[k]     = -55.0 + ((double) k)*yBinWidth + yBinWidth;
    yBinCenter[k]    = (yBinLower[k] + yBinUpper[k])/2.;
    intYBinCenter[k] = (int) yBinCenter[k];
    //cout << yBinLower[k] << " " << intYBinCenter[k] << " " << yBinUpper[k] << endl;
  }

  // Open output ntuple
  char tempOut[500];
  //sprintf(tempOut, "position_map_%s.root", argv[1]);
  sprintf(tempOut, "position_map_%i.root", iXeRunPeriod);
  TFile *fileOut = new TFile(tempOut,"RECREATE");

  // Output histograms
  TH1F *hisxyEast0[nPosBinsX][nPosBinsY];
  TH1F *hisxyEast1[nPosBinsX][nPosBinsY];
  TH1F *hisxyEast2[nPosBinsX][nPosBinsY];
  TH1F *hisxyEast3[nPosBinsX][nPosBinsY];

  TH1F *hisxyWest0[nPosBinsX][nPosBinsY];
  TH1F *hisxyWest1[nPosBinsX][nPosBinsY];
  TH1F *hisxyWest2[nPosBinsX][nPosBinsY];
  TH1F *hisxyWest3[nPosBinsX][nPosBinsY];

  char *hisxyEast0Name = new char[10];
  char *hisxyEast1Name = new char[10];
  char *hisxyEast2Name = new char[10];
  char *hisxyEast3Name = new char[10];

  char *hisxyWest0Name = new char[10];
  char *hisxyWest1Name = new char[10];
  char *hisxyWest2Name = new char[10];
  char *hisxyWest3Name = new char[10];

  int nBin = 400;
  for (int i=0; i<nPosBinsX; i++) {
    for (int j=0; j<nPosBinsY; j++) {
      sprintf(hisxyEast0Name, "e0_%i_%i", intXBinCenter[i], intYBinCenter[j]);
      sprintf(hisxyEast1Name, "e1_%i_%i", intXBinCenter[i], intYBinCenter[j]);
      sprintf(hisxyEast2Name, "e2_%i_%i", intXBinCenter[i], intYBinCenter[j]);
      sprintf(hisxyEast3Name, "e3_%i_%i", intXBinCenter[i], intYBinCenter[j]);

      sprintf(hisxyWest0Name, "w0_%i_%i", intXBinCenter[i], intYBinCenter[j]);
      sprintf(hisxyWest1Name, "w1_%i_%i", intXBinCenter[i], intYBinCenter[j]);
      sprintf(hisxyWest2Name, "w2_%i_%i", intXBinCenter[i], intYBinCenter[j]);
      sprintf(hisxyWest3Name, "w3_%i_%i", intXBinCenter[i], intYBinCenter[j]);

      hisxyEast0[i][j] = new TH1F(hisxyEast0Name, "", nBin,0.0,4000.0);
      hisxyEast1[i][j] = new TH1F(hisxyEast1Name, "", nBin,0.0,4000.0);
      hisxyEast2[i][j] = new TH1F(hisxyEast2Name, "", nBin,0.0,4000.0);
      hisxyEast3[i][j] = new TH1F(hisxyEast3Name, "", nBin,0.0,4000.0);

      hisxyWest0[i][j] = new TH1F(hisxyWest0Name, "", nBin,0.0,4000.0);
      hisxyWest1[i][j] = new TH1F(hisxyWest1Name, "", nBin,0.0,4000.0);
      hisxyWest2[i][j] = new TH1F(hisxyWest2Name, "", nBin,0.0,4000.0);
      hisxyWest3[i][j] = new TH1F(hisxyWest3Name, "", nBin,0.0,4000.0);
    }
  }


  // Loop through input ntuples
  char tempIn[500];
  for (int i=0; i<nRuns; i++) {

    // Open input ntuple
    sprintf(tempIn, "/extern/plaster/ucna/Analyzer/basic_reconstruction/basic_reconstruction_%i.root", runList[i]);
    TFile *fileIn = new TFile(tempIn, "READ");
    TTree *Tin = (TTree*)(fileIn->Get("pass1"));
    int nEvents = Tin->GetEntries();
    cout << "Processing " << runList[i] << " ... " << endl;
    cout << "... nEvents = " << nEvents << endl;

    // Loop over events
    for (int i=0; i<nEvents; i++) {
      Tin->GetEvent(i);

      // Input variables
      Tin->SetBranchAddress("pmt0", &pmt[0]);
      Tin->SetBranchAddress("pmt1", &pmt[1]);
      Tin->SetBranchAddress("pmt2", &pmt[2]);
      Tin->SetBranchAddress("pmt3", &pmt[3]);
      Tin->SetBranchAddress("pmt4", &pmt[4]);
      Tin->SetBranchAddress("pmt5", &pmt[5]);
      Tin->SetBranchAddress("pmt6", &pmt[6]);
      Tin->SetBranchAddress("pmt7", &pmt[7]);

      Tin->SetBranchAddress("xE", &xE);
      Tin->SetBranchAddress("yE", &yE);
      Tin->SetBranchAddress("xW", &xW);
      Tin->SetBranchAddress("yW", &yW);

      Tin->SetBranchAddress("PID", &PID);
      Tin->SetBranchAddress("type", &type);
      Tin->SetBranchAddress("side", &side);
      Tin->SetBranchAddress("posError", &posError);

      // Select Type 0 events
      if (PID != 1) continue;
      if (type > 0) continue;

      int intBinX, intBinY;
      // Type 0 East Trigger
      if (side == 0) {
        intBinX = -1;
        intBinY = -1;
        // Determine position bin
        for (int m=0; m<nPosBinsX; m++) {
          if ( (xE >= xBinLower[m]) && (xE < xBinUpper[m]) ) intBinX = m;
        }
        for (int m=0; m<nPosBinsY; m++) {
          if ( (yE >= yBinLower[m]) && (yE < yBinUpper[m]) ) intBinY = m;
        }

        // Fill PMT histograms
        if (intBinX>0 && intBinY>0) hisxyEast0[intBinX][intBinY]->Fill(pmt[0]);
        if (intBinX>0 && intBinY>0) hisxyEast1[intBinX][intBinY]->Fill(pmt[1]);
        if (intBinX>0 && intBinY>0) hisxyEast2[intBinX][intBinY]->Fill(pmt[2]);
        if (intBinX>0 && intBinY>0) hisxyEast3[intBinX][intBinY]->Fill(pmt[3]);
      }

      // Type 0 West Trigger
      if (side == 1) {
        intBinX = -1;
        intBinY = -1;
        // Determine position bin
        for (int m=0; m<nPosBinsX; m++) {
          if ( (xW >= xBinLower[m]) && (xW < xBinUpper[m]) ) intBinX = m;
        }
        for (int m=0; m<nPosBinsY; m++) {
          if ( (yW >= yBinLower[m]) && (yW < yBinUpper[m]) ) intBinY = m;
        }

	// Fill PMT histograms 
        if (intBinX>0 && intBinY>0) hisxyWest0[intBinX][intBinY]->Fill(pmt[4]);
        if (intBinX>0 && intBinY>0) hisxyWest1[intBinX][intBinY]->Fill(pmt[5]);
        if (intBinX>0 && intBinY>0) hisxyWest2[intBinX][intBinY]->Fill(pmt[6]);
        if (intBinX>0 && intBinY>0) hisxyWest3[intBinX][intBinY]->Fill(pmt[7]);
      }


    }

    // Close input ntuple
    fileIn->Close();

  }

  // Gaussian fits to "200 keV" peak

  // Define fit ranges
  double xLow[nPosBinsX][nPosBinsY];
  double xHigh[nPosBinsX][nPosBinsY];
  int maxBin[nPosBinsX][nPosBinsY];
  double maxCounts[nPosBinsX][nPosBinsY];
  double binCenterMax[nPosBinsX][nPosBinsY];

  for (int i=0; i<nPosBinsX; i++) {
    for (int j=0; j<nPosBinsY; j++) {

      // Find bin with maximum content
      maxBin[i][j] = hisxyEast0[i][j]->GetMaximumBin();
      maxCounts[i][j] = hisxyEast0[i][j]->GetBinContent(maxBin[i][j]);
      binCenterMax[i][j] = hisxyEast0[i][j]->GetBinCenter(maxBin[i][j]);

      // Define fit range
      for (int m=maxBin[i][j]; m<nBin; m++) {
        if (hisxyEast0[i][j]->GetBinContent(m+1) < 0.5*maxCounts[i][j]) {
          xHigh[i][j] = hisxyEast0[i][j]->GetBinCenter(m+1);
          break;
        }
      }

      for (int m=maxBin[i][j]; m>0; m--) {
        if (hisxyEast0[i][j]->GetBinContent(m+1) < 0.5*maxCounts[i][j]) {
          xLow[i][j] = hisxyEast0[i][j]->GetBinCenter(m+1);
          break;
        }
      }

    }
  }

  // Fit histograms
  TF1 *gaussian_fit[nPosBinsX][nPosBinsY];

  for (int i=0; i<nPosBinsX; i++) {
    for (int j=0; j<nPosBinsY; j++) {

      char fitName[500];
      sprintf(fitName, "gaussian_fit_%i_%i.root", i, j);

      gaussian_fit[i][j] = new TF1(fitName,
       		                   "[0]*exp(-(x-[1])*(x-[1])/(2.*[2]*[2]))",
                                   xLow[i][j], xHigh[i][j]);
      gaussian_fit[i][j]->SetParameter(0,maxCounts[i][j]);
      gaussian_fit[i][j]->SetParameter(1,binCenterMax[i][j]);
      gaussian_fit[i][j]->SetParameter(2,100.);
      hisxyEast0[i][j]->Fit(fitName, "LR");
    }
  }

  // Write output ntuple
  fileOut->Write();
  fileOut->Close();

  return 0;
}
